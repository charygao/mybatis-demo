<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.fengwenyi.mybatis_demo.dynamicsql.dao.IUserDao" >

    <!-- test if -->
    <select id="testIf" resultType="User">
        SELECT
          id, name, age
        FROM
          user
        WHERE
          <if test="id > 2">
              id = #{id}
          </if>
    </select>

    <!-- test where -->
    <select id="testWhere" resultType="User">
        SELECT
          id, name, age
        FROM
          user
        <where>
            <if test="id > 2">
                id = #{id}
            </if>
        </where>
    </select>

    <!-- test trim -->
    <select id="testTrim" resultType="User">
        SELECT
          id, name, age
        FROM
          user
        <trim prefix="where" prefixOverrides="where|and|or" suffix="" suffixOverrides="and|or">
            <if test="id > 2">
                id = #{id}
            </if>
        </trim>
    </select>

    <!-- test choose -->
    <select id="testChoose" resultType="User">
        SELECT
        id, name, age
        FROM
        user
        <where>
            <choose>
                <when test="id == 2">
                    id = #{id}
                </when>
                <when test="id == 1">
                    id = #{id}
                </when>
                <otherwise>
                    id = '3'
                </otherwise>
            </choose>
        </where>
    </select>

    <!-- test foreach
        collection：指定要遍历的集合：
        list类型的参数会特殊处理封装在map中，map的key就叫list
        item：将当前遍历出的元素赋值给指定的变量
        separator:每个元素之间的分隔符
        open：遍历出所有结果拼接一个开始的字符
        close:遍历出所有结果拼接一个结束的字符
        index:索引。遍历list的时候是index就是索引，item就是当前值
     -->
    <select id="testForeach" resultType="User">
        SELECT
          id, name, age
        FROM
          user
        <where>
            id
            IN
            <foreach item="item" index="index" collection="ids"
                     open="(" separator="," close=")">
                #{item}
            </foreach>
        </where>
    </select>

    <!-- test set -->
    <update id="testUpdate">
        UPDATE
          user
        <set>
            <if test="user.name != null">name = #{user.name},</if>
            <if test="user.age != null and user.age >= 0">age = #{user.age}</if>
        </set>
        <where>
            <if test="user.id != null and user.id > 0">id = #{user.id}</if>
        </where>
    </update>

    <!-- test batch insert -->
    <insert id="testBatchInsert1">
        INSERT INTO
          user(name, age)
        VALUES
        <foreach collection="users" index="i" item="k" separator=",">
            (
            <if test="k.name != null">#{k.name}</if>
            ,
            <if test="k.age != null and k.age >= 0">#{k.age}</if>
            )
        </foreach>
    </insert>

    <insert id="testBatchInsert2">

        <foreach collection="users" index="i" item="k" separator=";">
            INSERT INTO
              user(name, age)
            VALUES(
            <if test="k.name != null">#{k.name}</if>
            ,
            <if test="k.age != null and k.age >= 0">#{k.age}</if>
            )
        </foreach>
    </insert>

    <!--
     // test _parameter
    User test_parameter (Integer id);
     -->
    <select id="test_parameter1" resultType="User">
        SELECT
          id, name, age
        FROM
          <include refid="tName"/>
        <where>
            name = #{_paramete}
        </where>
    </select>

    <select id="test_parameter2" resultType="User">
        SELECT
        id, name, age
        FROM
        <include refid="tName"/>
        <where>
            name = #{_parameter.name}
            AND
            age = #{_parameter.age}
        </where>
    </select>

    <!--
     List<User> testBind (String name);
     -->
    <select id="testBind" resultType="User">
        <bind name="pattern" value="'%' + _parameter + '%'" />
        SELECT
          id, name, age
        FROM
          <include refid="tName"/>
        <where>
            name LIKE #{pattern}
        </where>
    </select>

    <select id="testLike" resultType="User">
        SELECT
        id, name, age
        FROM
        <include refid="tName"/>
        <where>
            name LIKE #{_parameter}
        </where>
    </select>

    <sql id="tName">
        user
    </sql>

</mapper>